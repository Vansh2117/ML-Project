1. data ingestion from multiple sources:
    import os
    import sys
    import pandas as pd
    import requests
    from pymongo import MongoClient
    from sklearn.model_selection import train_test_split
    from src.exception import CustomException
    from src.logger import logging
    from src.components.data_ingestion_config import DataIngestionConfig  # update as needed

    class DataIngestion:
        def __init__(self):
            self.ingestion_config = DataIngestionConfig()

        def load_data(self, source_type="csv", **kwargs):
            try:
                if source_type == "csv":
                    logging.info("Loading data from CSV")
                    return pd.read_csv(kwargs['path'])

                elif source_type == "mongo":
                    logging.info("Loading data from MongoDB")
                    client = MongoClient(kwargs['uri'])
                    db = client[kwargs['db']]
                    collection = db[kwargs['collection']]
                    return pd.DataFrame(list(collection.find()))

                elif source_type == "api":
                    logging.info("Loading data from public API")
                    response = requests.get(kwargs['url'])
                    return pd.DataFrame(response.json())

                else:
                    raise ValueError(f"Unsupported source_type: {source_type}")

            except Exception as e:
                raise CustomException(e, sys)

        def initiate_data_ingestion(self, source_type="csv", **kwargs):
            logging.info("Entered the data ingestion method")
            try:
                df = self.load_data(source_type=source_type, **kwargs)
                logging.info("Data successfully loaded")

                os.makedirs(os.path.dirname(self.ingestion_config.train_data_path), exist_ok=True)
                df.to_csv(self.ingestion_config.raw_data_path, index=False, header=True)

                logging.info("Train-test split initiated")
                train_set, test_set = train_test_split(df, test_size=0.2, random_state=42)

                train_set.to_csv(self.ingestion_config.train_data_path, index=False, header=True)
                test_set.to_csv(self.ingestion_config.test_data_path, index=False, header=True)

                logging.info("Ingestion completed")

                return (
                    self.ingestion_config.train_data_path,
                    self.ingestion_config.test_data_path
                )

            except Exception as e:
                raise CustomException(e, sys)
2. 

